185. Department Top Three Salaries(https://leetcode.com/problems/department-top-three-salaries/description/)


Table: Employee

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| id           | int     |
| name         | varchar |
| salary       | int     |
| departmentId | int     |
+--------------+---------+
id is the primary key column for this table.
departmentId is a foreign key of the ID from the Department table.
Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.
 

Table: Department

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
+-------------+---------+
id is the primary key column for this table.
Each row of this table indicates the ID of a department and its name.
 

A company's executives are interested in seeing who earns the most money in each of the company's departments. A high earner in a department is an employee who has a salary in the top three unique salaries for that department.

Write an SQL query to find the employees who are high earners in each of the departments.

Return the result table in any order.

The query result format is in the following example.

 

Example 1:

Input: 
Employee table:
+----+-------+--------+--------------+
| id | name  | salary | departmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 85000  | 1            |
| 2  | Henry | 80000  | 2            |
| 3  | Sam   | 60000  | 2            |
| 4  | Max   | 90000  | 1            |
| 5  | Janet | 69000  | 1            |
| 6  | Randy | 85000  | 1            |
| 7  | Will  | 70000  | 1            |
+----+-------+--------+--------------+
Department table:
+----+-------+
| id | name  |
+----+-------+
| 1  | IT    |
| 2  | Sales |
+----+-------+
Output: 
+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| IT         | Joe      | 85000  |
| IT         | Randy    | 85000  |
| IT         | Will     | 70000  |
| Sales      | Henry    | 80000  |
| Sales      | Sam      | 60000  |
+------------+----------+--------+
Explanation: 
In the IT department:
- Max earns the highest unique salary
- Both Randy and Joe earn the second-highest unique salary
- Will earns the third-highest unique salary

In the Sales department:
- Henry earns the highest salary
- Sam earns the second-highest salary
- There is no third-highest salary as there are only two employees


Summary :

1. We have two tables: "Employee" and "Department." The "Employee" table contains information about employees, including their ID, name, salary, and department ID. The "Department" table contains information about departments, including their ID and name.

2. The goal is to write an SQL query that finds the employees who are high earners in each department. A high earner is defined as an employee who has a salary in the top three unique salaries for their department. We need to identify the employees with the highest, second-highest, and third-highest salaries for each unique department.

3. The result table should contain three columns: "Department," "Employee," and "Salary." It should include the name of the department, the name of the high-earning employee in that department, and their salary.

4. The order of the output doesn't matter, so we can return the result table in any order.


Solution :

WITH salary_analysis
AS (
    SELECT d.Name AS Department,
        e.Name AS Employee,
        e.Salary,
        dense_rank() OVER (
            PARTITION BY d.Id ORDER BY e.Salary DESC
            ) AS salary_rank_num
    FROM Department d
    INNER JOIN Employee e ON d.Id = e.DepartmentId
    )
SELECT Department,
    Employee,
    Salary
FROM salary_analysis
WHERE salary_rank_num <= 3
ORDER BY Department,
    Salary DESC;

Runtime : 172 ms
